{"version":3,"file":"index.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { io, Socket } from 'socket.io-client';\nimport './styles.css';\n\ninterface WidgetConfig {\n  apiKey: string | null;\n  organization: string | null;\n  userId: string | null;\n  userName: string | null;\n  userEmail: string | null;\n  apiUrl: string;\n  socketUrl: string;\n  position: 'right' | 'left';\n  primaryColor: string;\n  headerText: string;\n  placeholder: string;\n  welcomeMessage: string | null;\n  autoOpen: boolean;\n  debug: boolean;\n}\n\ninterface Message {\n  content: string;\n  sender: {\n    _id: string;\n    firstName?: string;\n    lastName?: string;\n    avatar?: string;\n  };\n  createdAt: Date;\n}\n\nclass SaaSChatWidget {\n  private config: WidgetConfig;\n  private socket: Socket | null = null;\n  private currentChatId: string | null = null;\n  private pendingMessages: string[] = [];\n  private elements: {\n    widgetContainer: HTMLElement | null;\n    chatButton: HTMLElement | null;\n    chatWindow: HTMLElement | null;\n    messagesContainer: HTMLElement | null;\n    input: HTMLTextAreaElement | null;\n    sendButton: HTMLElement | null;\n  } = {\n    widgetContainer: null,\n    chatButton: null,\n    chatWindow: null,\n    messagesContainer: null,\n    input: null,\n    sendButton: null,\n  };\n\n  constructor(config: Partial<WidgetConfig> = {}) {\n\n    this.config = {\n      apiKey: null,\n      organization: null,\n      userId: null,\n      userName: null,\n      userEmail: null,\n      apiUrl: 'https://api.saas-chat.com',\n      socketUrl: 'https://api.saas-chat.com',\n      position: 'right',\n      primaryColor: '#6366f1',\n      headerText: 'Chat Support',\n      placeholder: 'Type a message...',\n      welcomeMessage: 'Hello! How can we help you today?',\n      autoOpen: false,\n      debug: false,\n      ...config,\n    };\n\n\n    this.init();\n  }\n\n\n  private init(): void {\n    this.log('Initializing widget');\n    this.createStyles();\n    this.createWidgetElements();\n\n\n    if (this.config.autoOpen) {\n      setTimeout(() => {\n        this.openChatWindow();\n      }, 1000);\n    }\n  }\n\n\n  private createStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .saas-chat-widget {\n        position: fixed;\n        bottom: 20px;\n        ${this.config.position === 'right' ? 'right: 20px' : 'left: 20px'};\n        z-index: 9999;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n      }\n\n      .saas-chat-button {\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        background-color: ${this.config.primaryColor};\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.2s ease;\n      }\n\n      .saas-chat-button:hover {\n        transform: scale(1.05);\n        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n      }\n\n      .saas-chat-button svg {\n        width: 28px;\n        height: 28px;\n      }\n\n      .saas-chat-window {\n        position: fixed;\n        bottom: 90px;\n        ${this.config.position === 'right' ? 'right: 20px' : 'left: 20px'};\n        width: 360px;\n        height: 500px;\n        background-color: white;\n        border-radius: 12px;\n        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n        transition: all 0.3s ease;\n        opacity: 0;\n        transform: translateY(20px) scale(0.95);\n        pointer-events: none;\n      }\n\n      .saas-chat-window.open {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n        pointer-events: all;\n      }\n\n      .saas-chat-header {\n        background-color: ${this.config.primaryColor};\n        color: white;\n        padding: 15px 20px;\n        font-weight: 600;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .saas-chat-close {\n        cursor: pointer;\n        opacity: 0.8;\n        transition: opacity 0.2s;\n      }\n\n      .saas-chat-close:hover {\n        opacity: 1;\n      }\n\n      .saas-chat-messages {\n        flex: 1;\n        overflow-y: auto;\n        padding: 15px;\n        background-color: #f5f7fb;\n      }\n\n      .saas-chat-message {\n        margin-bottom: 10px;\n        max-width: 80%;\n        padding: 10px 15px;\n        border-radius: 18px;\n        position: relative;\n        word-wrap: break-word;\n      }\n\n      .saas-chat-message.user {\n        background-color: ${this.config.primaryColor};\n        color: white;\n        margin-left: auto;\n        border-bottom-right-radius: 4px;\n      }\n\n      .saas-chat-message.agent {\n        background-color: #e5e7eb;\n        color: #1f2937;\n        margin-right: auto;\n        border-bottom-left-radius: 4px;\n      }\n\n      .saas-chat-input-container {\n        padding: 10px 15px;\n        border-top: 1px solid #e5e7eb;\n        display: flex;\n        align-items: center;\n      }\n\n      .saas-chat-input {\n        flex: 1;\n        border: 1px solid #d1d5db;\n        border-radius: 20px;\n        padding: 8px 15px;\n        outline: none;\n        font-size: 14px;\n        resize: none;\n        max-height: 100px;\n        overflow-y: auto;\n      }\n\n      .saas-chat-input:focus {\n        border-color: ${this.config.primaryColor};\n        box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);\n      }\n\n      .saas-chat-send {\n        margin-left: 10px;\n        width: 36px;\n        height: 36px;\n        border-radius: 50%;\n        background-color: ${this.config.primaryColor};\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        border: none;\n        outline: none;\n      }\n\n      .saas-chat-send:disabled {\n        background-color: #d1d5db;\n        cursor: not-allowed;\n      }\n\n      .saas-chat-send svg {\n        width: 18px;\n        height: 18px;\n      }\n\n      @media (max-width: 480px) {\n        .saas-chat-window {\n          width: calc(100% - 40px);\n          height: calc(100% - 120px);\n          bottom: 80px;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n\n  private createWidgetElements(): void {\n\n    const widgetContainer = document.createElement('div');\n    widgetContainer.className = 'saas-chat-widget';\n\n\n    const chatButton = document.createElement('div');\n    chatButton.className = 'saas-chat-button';\n    chatButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path></svg>';\n    chatButton.addEventListener('click', this.toggleChatWindow.bind(this));\n\n\n    const chatWindow = document.createElement('div');\n    chatWindow.className = 'saas-chat-window';\n    chatWindow.id = 'saas-chat-window';\n\n\n    const chatHeader = document.createElement('div');\n    chatHeader.className = 'saas-chat-header';\n    chatHeader.innerHTML = `\n      <div>${this.config.headerText}</div>\n      <div class=\"saas-chat-close\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n        </svg>\n      </div>\n    `;\n    chatHeader.querySelector('.saas-chat-close')?.addEventListener('click', this.closeChatWindow.bind(this));\n\n\n    const messagesContainer = document.createElement('div');\n    messagesContainer.className = 'saas-chat-messages';\n    messagesContainer.id = 'saas-chat-messages';\n\n\n    const inputContainer = document.createElement('div');\n    inputContainer.className = 'saas-chat-input-container';\n\n\n    const input = document.createElement('textarea');\n    input.className = 'saas-chat-input';\n    input.placeholder = this.config.placeholder;\n    input.rows = 1;\n    input.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.sendMessage();\n      }\n\n\n      setTimeout(() => {\n        input.style.height = 'auto';\n        input.style.height = Math.min(input.scrollHeight, 100) + 'px';\n      }, 0);\n    });\n\n\n    const sendButton = document.createElement('button');\n    sendButton.className = 'saas-chat-send';\n    sendButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>';\n    sendButton.addEventListener('click', this.sendMessage.bind(this));\n\n\n    inputContainer.appendChild(input);\n    inputContainer.appendChild(sendButton);\n\n    chatWindow.appendChild(chatHeader);\n    chatWindow.appendChild(messagesContainer);\n    chatWindow.appendChild(inputContainer);\n\n    widgetContainer.appendChild(chatWindow);\n    widgetContainer.appendChild(chatButton);\n\n    document.body.appendChild(widgetContainer);\n\n\n    this.elements = {\n      widgetContainer,\n      chatButton,\n      chatWindow,\n      messagesContainer,\n      input,\n      sendButton,\n    };\n\n\n    if (this.config.welcomeMessage) {\n      this.addMessage(this.config.welcomeMessage, 'agent');\n    }\n  }\n\n\n  private toggleChatWindow(): void {\n    if (this.elements.chatWindow?.classList.contains('open')) {\n      this.closeChatWindow();\n    } else {\n      this.openChatWindow();\n    }\n  }\n\n\n  private openChatWindow(): void {\n    this.elements.chatWindow?.classList.add('open');\n    this.elements.input?.focus();\n\n\n    this.initializeSocket();\n  }\n\n\n  private closeChatWindow(): void {\n    this.elements.chatWindow?.classList.remove('open');\n  }\n\n\n  private addMessage(content: string, type: 'user' | 'agent'): void {\n    if (!this.elements.messagesContainer) return;\n\n    const messageElement = document.createElement('div');\n    messageElement.className = `saas-chat-message ${type}`;\n    messageElement.textContent = content;\n    this.elements.messagesContainer.appendChild(messageElement);\n\n\n    this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;\n  }\n\n\n  private sendMessage(): void {\n    if (!this.elements.input) return;\n\n    const message = this.elements.input.value.trim();\n\n    if (!message) return;\n\n\n    this.addMessage(message, 'user');\n\n\n    this.elements.input.value = '';\n    this.elements.input.style.height = 'auto';\n\n\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('send-message', {\n        chatId: this.currentChatId,\n        content: message,\n      });\n      this.log('Message sent:', message);\n    } else {\n      this.log('Socket not connected, storing message for later');\n      this.pendingMessages.push(message);\n\n\n      this.initializeSocket();\n    }\n  }\n\n\n  private initializeSocket(): void {\n    if (this.socket && this.socket.connected) {\n      this.log('Socket already connected');\n      return;\n    }\n\n    this.log('Connecting to socket server:', this.config.socketUrl);\n\n\n    if (!this.config.userId) {\n      this.config.userId = localStorage.getItem('saas-chat-user-id');\n      if (!this.config.userId) {\n        this.config.userId = 'widget_' + Math.random().toString(36).substring(2, 15);\n        localStorage.setItem('saas-chat-user-id', this.config.userId);\n      }\n    }\n\n\n    this.socket = io(this.config.socketUrl, {\n      auth: {\n        token: this.config.apiKey,\n        userId: this.config.userId,\n        userName: this.config.userName || 'Website Visitor',\n        userEmail: this.config.userEmail,\n        organization: this.config.organization,\n      },\n      transports: ['websocket'],\n    });\n\n\n    this.socket.on('connect', () => {\n      this.log('Socket connected');\n\n\n      this.getOrCreateChat();\n    });\n\n    this.socket.on('disconnect', () => {\n      this.log('Socket disconnected');\n    });\n\n    this.socket.on('error', (error) => {\n      this.log('Socket error:', error);\n    });\n\n    this.socket.on('new-message', (data) => {\n      this.log('New message received:', data);\n\n\n      if (data.message.sender._id !== this.config.userId) {\n        this.addMessage(data.message.content, 'agent');\n      }\n    });\n  }\n\n\n  private getOrCreateChat(): void {\n    this.log('Getting or creating chat');\n\n\n    this.currentChatId = localStorage.getItem('saas-chat-chat-id');\n\n    if (this.currentChatId) {\n      this.log('Found existing chat:', this.currentChatId);\n\n\n      if (this.socket) {\n        this.socket.emit('join-chat', this.currentChatId);\n      }\n\n\n      this.sendPendingMessages();\n    } else {\n      this.log('Creating new chat');\n\n\n      fetch(`${this.config.apiUrl}/api/widget/chats`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`,\n        },\n        body: JSON.stringify({\n          userId: this.config.userId,\n          userName: this.config.userName || 'Website Visitor',\n          userEmail: this.config.userEmail,\n          organization: this.config.organization,\n        }),\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.log('Chat created:', data);\n\n        if (data.success && data.data && data.data._id) {\n          this.currentChatId = data.data._id;\n\n\n          localStorage.setItem('saas-chat-chat-id', this.currentChatId as string);\n\n\n          if (this.socket) {\n            this.socket.emit('join-chat', this.currentChatId);\n          }\n\n\n          this.sendPendingMessages();\n        } else {\n          this.log('Failed to create chat:', data);\n        }\n      })\n      .catch(error => {\n        this.log('Error creating chat:', error);\n      });\n    }\n  }\n\n\n  private sendPendingMessages(): void {\n    if (this.pendingMessages.length > 0 && this.currentChatId && this.socket) {\n      this.log('Sending pending messages:', this.pendingMessages);\n\n      this.pendingMessages.forEach(message => {\n        this.socket?.emit('send-message', {\n          chatId: this.currentChatId,\n          content: message,\n        });\n      });\n\n      this.pendingMessages = [];\n    }\n  }\n\n\n  private log(...args: any[]): void {\n    if (this.config.debug) {\n      console.log('SaaS Chat Widget:', ...args);\n    }\n  }\n\n\n  public open(): void {\n    this.openChatWindow();\n  }\n\n\n  public close(): void {\n    this.closeChatWindow();\n  }\n\n\n  public destroy(): void {\n\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n\n    if (this.elements.widgetContainer) {\n      document.body.removeChild(this.elements.widgetContainer);\n    }\n\n\n    this.elements = {\n      widgetContainer: null,\n      chatButton: null,\n      chatWindow: null,\n      messagesContainer: null,\n      input: null,\n      sendButton: null,\n    };\n  }\n}\n\n\nif (typeof window !== 'undefined') {\n\n  const scriptElement = document.currentScript as HTMLScriptElement;\n\n  if (scriptElement) {\n    const config: Partial<WidgetConfig> = {};\n\n\n    Array.from(scriptElement.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-')) {\n\n        const key = attr.name.slice(5).replace(/-([a-z])/g, (_, letter) => letter.toUpperCase()) as keyof WidgetConfig;\n\n\n        if (attr.value === 'true') {\n          (config as any)[key] = true;\n        } else if (attr.value === 'false') {\n          (config as any)[key] = false;\n        } else {\n          (config as any)[key] = attr.value;\n        }\n      }\n    });\n\n\n    (window as any).saasChat = new SaaSChatWidget(config);\n  }\n}\n\nexport default SaaSChatWidget;\n"],"names":["ref","insertAt","SaaSChatWidget","socket","currentChatId","pendingMessages","elements","widgetContainer","chatButton","chatWindow","messagesContainer","input","sendButton","constructor","config","arguments","length","undefined","this","apiKey","organization","userId","userName","userEmail","apiUrl","socketUrl","position","primaryColor","headerText","placeholder","welcomeMessage","autoOpen","debug","init","log","createStyles","createWidgetElements","setTimeout","openChatWindow","style","document","createElement","textContent","head","appendChild","className","innerHTML","addEventListener","toggleChatWindow","bind","id","chatHeader","querySelector","closeChatWindow","inputContainer","rows","e","key","shiftKey","preventDefault","sendMessage","height","Math","min","scrollHeight","body","addMessage","classList","contains","add","focus","initializeSocket","remove","content","type","messageElement","scrollTop","message","value","trim","connected","emit","chatId","push","localStorage","getItem","random","toString","substring","setItem","io","auth","token","transports","on","getOrCreateChat","error","data","sender","_id","sendPendingMessages","fetch","method","headers","Authorization","JSON","stringify","then","response","json","success","catch","forEach","_len","args","Array","_key","console","open","close","destroy","disconnect","removeChild","window","scriptElement","currentScript","from","attributes","attr","name","startsWith","slice","replace","_","letter","toUpperCase","saasChat"],"mappings":"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","x_google_ignoreList":[0]}